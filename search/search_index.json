{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Integrasi Numerik \u00b6 \u200b Integrasi Numerik, mengambil peranan yang sangat penting dalam masalah sains dan teknik. Mengingat dalam bidang sains, sering ditemukan ungkapan-ungkapan integral dan diferensial maupun kalimat-kalimat matematis yang tidak mudah dimengerti dan bahkan bisa diselesaikan dengan cara analitik. Selain hal itu, kadang-kadang fungsi yang integralkan tidak berbentuk analitis, melainkan berupa titik-titik data. Beberapa hal ini sering muncul dalam banyak aplikasi teknik. Oleh sebab itu, adanya Integrasi Numerik ini diharapkan mampu membantu ketika permasalahan dipecahkan dengan analitik sudah buntu 1 . \u200b Dalam bahasan integrasi numerik kali ini, ada banyak jenis-jenis integrasi numerik salah satunya ialah : Newton-Cotes Metode Trapesium Dalam pembahasan Integral Numerik kali ini, memang tidak mencantumkan semua metode yang ada pada integrasi numerik, namun pembahasan jenis-jenis integrasi numerik ini sudah lumrah dilakukan dan mungkin lebih mudah untuk dipahami 1 . 1. Newton-Cotes \u00b6 \u200b Newton-Cotes merupakan perhitungan integrasi numerik yang paling umum dan dilakukan. Newton-Cotes secara umum pengertiannya merupakan metode integrasi yang dilakukan dengan cara membagi area dibawah kurva suatu fungsi menjadi beberapa panel dengan terlebih dahulu menetapkan batas atas dan batas bawah interval. Integral atau luas area di bawah kurva ditentukan berdasarkan jumlah luas panel yang digunakan untuk mendekati luas area di bawah kurva 1 . \u200b Dalam Newton-Cotes, tedapat banyak metode, salah satunya ialah Metode Integral Riemann . Metode Integral Riemann ini dilakukan dengan membagi interval di bawah suatu kurva fungsi matematik sebanyak m subinterval sama besar. Pada setiap subinterval, dibentuk persegi panjang setinggi kurva pada setiap titik tengah persegi panjang tersebut. Lalu, area pada setiap interval diperoleh dengan cara mengalikan panjang dan lebar pada masing-masing persegi panjang. Jumlah dari panjang dan lebar dari masing-masing persegi panjang tersebut digunakan untuk menaksir interval integral suatu fungsi dengan interval tertentu 1 . \u200b Fungsi proses integrasi menggunakan metode titik tengah dituliskan dalam persamaan berikut : \\int ^{a}_{b}f\\left( x\\right) dx\\approx \\sum ^{m}_{i=1}F\\left( i\\dfrac{|b-a|}{m}-\\dfrac{\\left| b-a\\right| }{2m}\\right) \\dfrac{\\left| b-a\\right| }{m} dimana b dan a merupakan masing-masing batas atas dan bawah interval kurva yang hendak dihitung integralnya. dalam persamaan pertama, galat atau error bisa dihitung melalui persamaan berikut : 1 \\int ^{a}_{b}h\\left( x\\right) dx=-\\dfrac{\\left( b-a\\right) ^{3}}{24m^{2}}f^{\\left( 2\\right) }\\left( \\varepsilon \\right) dari persamaan error diatas, e disini merupakan nilai antara a dan b . 1 Contoh Soal Hitunglah integral fungsi di bawah ini menggunakan metode integral Reimann dengan interval 0 sampai 1 dengan jumlah panel 2 dan 4 1 ! \\int ^{1}_{0}x^{2}dx Jawaban Persamaan pada contoh diatas, bisa diselesaikan dengan cara analitik, dengan cara sebagai berikut : 1 \\int ^{1}_{0}x^{2}dx=\\left[ \\dfrac{x^{3}}{3}\\right] _{0}^{1}=\\dfrac{1^{3}}{3}-\\dfrac{0^{3}}{3}=0.333\\ldots Penyelesaian dengan cara numerik menggunakan metode titik tengah dengan jumlah panel 2 dapat dilakukan dengan cara,pertama ialah menentukan lokasi titik tengah kedua panel. Dan, berdasarkan interval fungsi dapat ditentukan titik tengah kedua panel berada pada x = 0,25 dan x = 0,75 , maka (perhitungan dapat dilakukan seperti berikut 1 : \\int ^{1}_{0}x^{2}dx\\approx \\left( f\\left( 0,25\\right) +f\\left( 0175\\right) \\right) \\dfrac{1-0}{2}= \\dfrac{0,25^{2}+0,75^{2}}{2}= 0,3125 Agar lebih mendekati ke nilai yang akurat, maka jumlah panel ditingkatkan. Untuk jumlah panel 4, titik tengah berada pada x = {0,125;0,375;0,625;0,875} 1 \\int ^{1}_{0}x^{2}dx\\approx ( f\\left( 0,125\\right) + f\\left( 0,375\\right) + f\\left( 0,625\\right) + f\\left( 0,875\\right)) = \\dfrac{1-0}{4} = 0,328125 Gambar grafik proses integrasi dengan metode Riemann dapat dilihat sesuai dengan gambar berikut : 1 Algoritma Program Dalam pemecahan dengan cara numerik menggunakan Metode Integral Riemann, bisa menggunakan aplikasi yang ada dengan bahasa python. Berikut Source Code lengkapnya : #Membuat Fungsi untuk f(x) dan fungsi turunan f(x) def fx ( x ) : return x * x #Turunan f(x) def fx_turunan ( y ) : return ( y * y * y ) / 3 #inputan a = input ( \"Masukkan nilai Batas bawah : \" ) b = input ( \"Masukkan nilai Batas atas : \" ) n = input ( \"Masukkan nilai n : \" ) #Nilai n merupakan nilai yang dibatasi berapa iterasi yang diinginkan a = float ( a ) b = float ( b ) n = float ( n ) h = ( b - a ) / n #Persamaan metode titik tengah atau Riemann x = a jum_luas = 0 print ( \"x\" , \"f(x)\" ) while x < b + h : l = h * fx ( x ) print ( x , l ) x = x + h x = round ( x , 2 ) jum_luas = jum_luas + l jum_eksak = fx_turunan ( b ) - fx_turunan ( a ) error = abs ( jum_luas - jum_eksak ) #Mencetak print ( \"Hasil Jumlah Eksak : \" , jum_eksak ) print ( \"Hasil integral Riemann : \" , jum_luas ) print ( \"Error : \" , error ) Hasil Running Program : Masukkan nilai Batas bawah : 0 Masukkan nilai Batas atas : 1 Masukkan nilai n : 10 x f(x) 0.0 0.0 0.1 0.0010000000000000002 0.2 0.004000000000000001 0.3 0.009 0.4 0.016000000000000004 0.5 0.025 0.6 0.036 0.7 0.048999999999999995 0.8 0.06400000000000002 0.9 0.08100000000000002 1.0 0.1 Hasil Jumlah Eksak : 0.3333333333333333 Hasil integral Riemann : 0.385 Error : 0.051666666666666694 Penjelasan Source Code Program #Membuat Fungsi untuk f(x) dan fungsi turunan f(x) def fx ( x ) : return x * x #Turunan f(x) def fx_turunan ( y ) : return ( y * y * y ) / 3 Pertama, membuat 2 fungsi dimana fungsi pertama mengandung fungsi integral f(x) = x^{2} dan fungsi yang kedua ialah turunan dari integral f(x) = x^2 ialah f^{l}\\left( x\\right) =\\dfrac{x^{3}}{3} #inputan a = input ( \"Masukkan nilai Batas bawah : \" ) b = input ( \"Masukkan nilai Batas atas : \" ) n = input ( \"Masukkan nilai n : \" ) #Nilai n merupakan nilai yang dibatasi berapa iterasi yang diinginkan a = float ( a ) b = float ( b ) n = float ( n ) Kedua, membuat variabel inputan untuk nilai batas atas, bawah dan n. n merupakan berapa iterasi yang diinginkan oleh si pengguna program. Lalu, tipe data untuk nilai batas atas, batas bawah dan iterasi ialah bertipe float. h = ( b - a ) / n #Persamaan metode titik tengah atau Riemann x = a Ketiga, untuk variable h ialah berisi proses integrasi menggunakan metode titik tengah dan nilai variable x ialah nilai dari variable a. jum_luas = 0 print ( \"x\" , \"f(x)\" ) Keempat, variable jum_luas mempunyai nilai 0 dan print, untuk mencetak tampilan x dan f(x) . x merupakan nilai banyaknya iterasi yang dilakukan, dengan satuan float. Jadi jika hanya 4 iterasi, maka akan mencetak satuan 1/4 dari iterasi. dan f(x) merupakan nilai dari hasil iterasi. while x < b + h : l = h * fx ( x ) print ( x , l ) x = x + h x = round ( x , 2 ) jum_luas = jum_luas + l jum_eksak = fx_turunan ( b ) - fx_turunan ( a ) error = abs ( jum_luas - jum_eksak ) Kelima, menggunakan perulangan while untuk melakukan iterasi. Dimana jika nilai x kurang dari nilai b+h , maka melakukan iterasi. Variable l berisi nilai h dan dikalikan dengan isi dari fungsi f(x) . Lalu mencetak nilai x dan nilai l. Variable x berisi nilai x ditambahkan dengan nilai h . Dan nilai x berisi round dari nilai (x,2) . Dan nilai jum_luas mempunyai nilai jum_luas ditambahkan dengan 1. Kemudian, diluar dari perulangan, variable jum_eksask berisi nilai dari fungsi fx_turunan(b)-fx_turunan(a). Dan yang terakhir variable error yang menampung nilai error dari iterasi yang dilakukan dengan rumus jum_luas-jum_eksak. #Mencetak print ( \"Hasil Jumlah Eksak : \" , jum_eksak ) print ( \"Hasil integral Riemann : \" , jum_luas ) print ( \"Error : \" , error ) Keenam dan yang terakhir, mencetak nilai dari jumlah eksak, nilai dari hasil itegrasi Riemann dan error yang dihasilkan saat melakukan integrasi. 2. Metode Trapesium \u00b6 Menurut rumus geometri, luas trapesium merupakan jumlah sisi yang sejajar dikali tinggi dibagi 2. Dengan kaitannya dengan grafik fungsi f(x) , dalam koordinat cartesius, yang diamsumsikan berada di atas sumbu x, maka didapat rumus metode integrasi trapesium (satu pias) untuk menyelesaikan permasalahan menggunakan metode analitik dan numerik ialah sebagai berikut 2 : I\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2} Lalu, jika ingin dihitung pengintegrasian numerik dari sebuah fungsi yang berdejarat dua atau lebih, penggunaan metode trapesium akan memberikan kesalahan(yang bisa saja mendapatkan kesalahan yang lebih besar), sebagaimana yang ada pada pengimplementasian berikut 2 : Contoh Soal Hitunglah persamaan metode trapesium satu pias untuk menghitung, I=\\int ^{4}_{0}e^{x}dx 2 Penyelesaian : Persamaan diatas dapat diselesaikan dengan cara analitik, sebagai berikut : 2 I=\\int ^{4}_{0}e^{x}dx=\\left[ e^{x}\\right] _{0}^{4}=\\left[ e^{4}-e^{0}\\right] =53,598150 Hitungan dengan menggunakan Numerik dengan menggunakan metode trapesium menghasilkan : 2 I\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2}=\\left( 4-0\\right) \\dfrac{e^{0}+e^{4}}{2}=111,1963 Kesalahan atau error relatif terhadap nilai eksak perhitungannya sebagai berikut : \\varepsilon _{t}=\\dfrac{53,598150-111,1963}{53,598150}\\times 100\\% = -107,46\\% Dari sini, bisa disimpulkan bahwa penggunaan metode trapesium dengan satu pias memberikan kesalahan atau error yang sangat besar bahkan bisa mencapai lebih dari 100%. Maka dari itu, dilakukan beberapa perubahan dengan cara memperbanyak pias yang digunakan, yang artinya memperbanyak jumlah dari trapesium yang akan digunakan. Untuk mengestimasi luas daerah yang ingin dicari. Karena akan menggunakan banyak trapesium, maka integral total dapat dihitung dengan : 2 I=\\int ^{x_{1}}_{x_{0}}f\\left( x\\right) dx+\\int ^{x_{2}}_{x_{1}}f\\left( x\\right) dx+\\ldots +\\int ^{x_{n}}_{x_{n}-1}f\\left( x\\right) dx Jika lebar interval (yang berarti tinggi dari trapesium) dibuat sama, yaitu \\Delta x , sebagaimana yang sesuai dengan gambar di bawah berikut ini : 2 Maka, dapat disimpulkan bahwa integral total yang didapat adalah : 2 I=\\Delta x \\times \\dfrac{f\\left( x_{1}\\right) +f\\left( x_{0}\\right) }{2} + \\Delta x \\times \\dfrac{f\\left( x_{2}\\right) +f\\left( x_{1}\\right) }{2} + . . .+ \\Delta x \\times \\dfrac{f\\left( x_{n}\\right) +f\\left( x_{n-1}\\right) }{2} atau bisa juga dapat dituliskan secara singkat seperti berikut : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) +f\\left( x_{n}\\right) \\right] atau bisa juga seperti berikut : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] Contoh soal dengan empat pias Selesaikan persamaan berikut dengan menggunakan metode trapesium dengan empat pias, I=\\int ^{4}_{0}e^{x}dx 2 Penyelesaian : Karena digunakan metode trapesium dengan 4 pias, maka dari itu untuk menghitung lebar tiap pias ialah : 2 \\Delta x=\\dfrac{b-a}{n}=\\dfrac{4-0}{4}=1 Luas daerah yang dicari untuk persamaan ini ialah : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] I=\\dfrac{1}{2}[ e^{0}+e^{4}+2(e^{1}+e^{2}+e^{3})] = 57,991950 Kesalahan/error yang didapat terhadap nilai eksak : 2 \\varepsilon _{t}=\\dfrac{53,598150-57,991950}{53,598150}\\times 100\\% = -8,2\\% Maka dari itu, perbedaan dari contoh pertama dan contoh kedua cukup signifikan. Karena pada contoh pertama, hanya mempunyai satu pias dan mempunyai error sangat besar hingga melebihi 100%, sedangkan pada contoh kedua, persamaan yang sama dilanjutkan dengan diselesaikan dengan menggunakan empat pias, mempunyai galat atau error lebih kecil. Mengapa demikian, karena semakin banyak pias maka semakin banyak iterasi, maka error yang didapat semakin kecil. 2 Algoritma Program Dalam pemecahan dengan cara numerik menggunakan Metode Trapesium, bisa menggunakan aplikasi yang ada dengan bahasa python. Berikut Source Code lengkapnya : import math from math import exp e = exp ( 1 ) #Membuat fungsi untuk menyimpan data f(x) def fungsi ( x ) : return e ** x print ( \"Persamaan\" ) print ( \"e^x\" ) hasil_analitik = 54 #Hasil analitik harus bernilai int(bulat) a = float ( input ( \"Masukkan nilai batas bawah : \" )) b = float ( input ( \"Masukkan nilai batas atas : \" )) iterasi_banyak = int ( input ( \"Masukkan Banyak iterasi : \" )) print ( \"iterasi\" , \"trapesium\" , ' \\t ' , \"Error\" ) for iterasi in range ( 1 , iterasi_banyak ) : n = 2 * iterasi h = ( b - a ) / n #Metode Trapesium xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) It = ( h ) * (( fungsi ( a ) + ( 2 * y ) + fungsi ( b )) / 2 ) error = ( hasil_analitik - It ) / It * 100 print ( iterasi , ' \\t ' , \" %.8f \" % It , ' \\t ' , \" %.8f \" % error ) Hasil Running Program : Persamaan e^x Masukkan nilai batas bawah : 0 Masukkan nilai batas atas : 4 Masukkan Banyak iterasi : 4 iterasi trapesium Error 1 70.37626223 -23.26958226 2 57.99194987 -6.88362760 3 55.56871603 -2.82302011 Penjelasan Program import math from math import exp e = exp ( 1 ) #Membuat fungsi untuk menyimpan data f(x) def fungsi ( x ) : return e ** x print ( \"Persamaan\" ) print ( \"e^x\" ) hasil_analitik = 54 #Hasil analitik harus bernilai int(bulat) Pertama, mengimport math untuk menginisialisasi nilai eksponen, dengan nama exp dan dengan nilai pangkat 1 yang ditampung dalam variable e. Lalu, membuat fungsi f(x) yang berisi persamaan e^{x} . Selanjutnya mencetak tulisan persamaan, yaitu persamaannya ialah : e^{x} . Variable hasil_analitik ialah hasil analitik yang telah dihitung sebelumnya, ialah 53,598150 atau dibulatkan menjadi 54 . Harus int atau bulat, karena akan dikurangi oleh hasil nilai integrasi dari metode trapesium sehingga menjadi nilai error yang diperoleh. a = float ( input ( \"Masukkan nilai batas bawah : \" )) b = float ( input ( \"Masukkan nilai batas atas : \" )) iterasi_banyak = int ( input ( \"Masukkan Banyak iterasi : \" )) print ( \"iterasi\" , \"trapesium\" , ' \\t ' , \"Error\" ) Kedua, variable a dan b dimana menampung nilai batas bawah dan nilai batas atas. Variable iterasi_banyak ialah menampung banyaknya user akan menginput iterasi yang diinginkan. Lalu mencetak tampilan agar lebih menarik sehingga data iterasi, nilai yang diperoleh dari metode trapesium dan error tertata dengan rapi. for iterasi in range ( 1 , iterasi_banyak ) : n = 2 * iterasi h = ( b - a ) / n Ketiga, perulangan yang pertama ialah perulangan untuk iterasi di dalam jangkauan (1, iterasi_banyak). Maksud dari dalam jangkauan 1, iterasi_banyak ialah program akan mengeksekusi sebanyak apa program akan mengeksekusi untuk iterasi yang diinginkan, lalu banyaknya iterasi akan ditampung dalam variable n. variable h menampung rumus dari menghitung lebar dari setiap alas pada trapesium. #Metode Trapesium xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) It = ( h ) * (( fungsi ( a ) + ( 2 * y ) + fungsi ( b )) / 2 ) error = ( hasil_analitik - It ) / It * 100 Keempat, variable xi berisi tentang nilai a atau nilai batas bawah dari fungsi. Variable y berisi tentang awalan. Di dalam perulangan kedua, berisi tentang untuk i di dalam jangkauan 1,n. Maksud dari untuk i di dalam jangkauan 1,n ialah program akan melakukan perulangan sebanyak n. lalu, variable xi, dimana nilai xi selalu bertambah sebanyak nilai h(setiap melakukan perulangan). Variable y, nilai variable y akan bertambah terus oleh nilai dari fungsi(xi). Selanjutnya, setelah selesai perulangan dalam Variable It menampung rumus metode trapesium, ialah : I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] Dan yang terakhir, variable error ialah menampung rumus untuk mencari nilai error menggunakan rumus : \\varepsilon _{t}=\\dfrac{Nilai Analitik-Nilai eksak(Nilai Pendekatan)}{Nilai analitik}\\times 100\\% print ( iterasi , ' \\t ' , \" %.8f \" % It , ' \\t ' , \" %.8f \" % error ) Kelima, yang terakhir ialah menampilkan hasil dari nilai iterasi, nilai Nilai eksak(Nilai Pendekatan) dan Nilai Error. Refrensi \u00b6 https://bookdown.org/moh_rosidi2610/Metode_Numerik/diffinteg.html \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Dr. Achmad Fahrurozi, S.Si, M.Si, Integral Numerik, Universitas Gunadarma \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Integrasi Numerik"},{"location":"#integrasi_numerik","text":"\u200b Integrasi Numerik, mengambil peranan yang sangat penting dalam masalah sains dan teknik. Mengingat dalam bidang sains, sering ditemukan ungkapan-ungkapan integral dan diferensial maupun kalimat-kalimat matematis yang tidak mudah dimengerti dan bahkan bisa diselesaikan dengan cara analitik. Selain hal itu, kadang-kadang fungsi yang integralkan tidak berbentuk analitis, melainkan berupa titik-titik data. Beberapa hal ini sering muncul dalam banyak aplikasi teknik. Oleh sebab itu, adanya Integrasi Numerik ini diharapkan mampu membantu ketika permasalahan dipecahkan dengan analitik sudah buntu 1 . \u200b Dalam bahasan integrasi numerik kali ini, ada banyak jenis-jenis integrasi numerik salah satunya ialah : Newton-Cotes Metode Trapesium Dalam pembahasan Integral Numerik kali ini, memang tidak mencantumkan semua metode yang ada pada integrasi numerik, namun pembahasan jenis-jenis integrasi numerik ini sudah lumrah dilakukan dan mungkin lebih mudah untuk dipahami 1 .","title":"Integrasi Numerik"},{"location":"#1_newton-cotes","text":"\u200b Newton-Cotes merupakan perhitungan integrasi numerik yang paling umum dan dilakukan. Newton-Cotes secara umum pengertiannya merupakan metode integrasi yang dilakukan dengan cara membagi area dibawah kurva suatu fungsi menjadi beberapa panel dengan terlebih dahulu menetapkan batas atas dan batas bawah interval. Integral atau luas area di bawah kurva ditentukan berdasarkan jumlah luas panel yang digunakan untuk mendekati luas area di bawah kurva 1 . \u200b Dalam Newton-Cotes, tedapat banyak metode, salah satunya ialah Metode Integral Riemann . Metode Integral Riemann ini dilakukan dengan membagi interval di bawah suatu kurva fungsi matematik sebanyak m subinterval sama besar. Pada setiap subinterval, dibentuk persegi panjang setinggi kurva pada setiap titik tengah persegi panjang tersebut. Lalu, area pada setiap interval diperoleh dengan cara mengalikan panjang dan lebar pada masing-masing persegi panjang. Jumlah dari panjang dan lebar dari masing-masing persegi panjang tersebut digunakan untuk menaksir interval integral suatu fungsi dengan interval tertentu 1 . \u200b Fungsi proses integrasi menggunakan metode titik tengah dituliskan dalam persamaan berikut : \\int ^{a}_{b}f\\left( x\\right) dx\\approx \\sum ^{m}_{i=1}F\\left( i\\dfrac{|b-a|}{m}-\\dfrac{\\left| b-a\\right| }{2m}\\right) \\dfrac{\\left| b-a\\right| }{m} dimana b dan a merupakan masing-masing batas atas dan bawah interval kurva yang hendak dihitung integralnya. dalam persamaan pertama, galat atau error bisa dihitung melalui persamaan berikut : 1 \\int ^{a}_{b}h\\left( x\\right) dx=-\\dfrac{\\left( b-a\\right) ^{3}}{24m^{2}}f^{\\left( 2\\right) }\\left( \\varepsilon \\right) dari persamaan error diatas, e disini merupakan nilai antara a dan b . 1 Contoh Soal Hitunglah integral fungsi di bawah ini menggunakan metode integral Reimann dengan interval 0 sampai 1 dengan jumlah panel 2 dan 4 1 ! \\int ^{1}_{0}x^{2}dx Jawaban Persamaan pada contoh diatas, bisa diselesaikan dengan cara analitik, dengan cara sebagai berikut : 1 \\int ^{1}_{0}x^{2}dx=\\left[ \\dfrac{x^{3}}{3}\\right] _{0}^{1}=\\dfrac{1^{3}}{3}-\\dfrac{0^{3}}{3}=0.333\\ldots Penyelesaian dengan cara numerik menggunakan metode titik tengah dengan jumlah panel 2 dapat dilakukan dengan cara,pertama ialah menentukan lokasi titik tengah kedua panel. Dan, berdasarkan interval fungsi dapat ditentukan titik tengah kedua panel berada pada x = 0,25 dan x = 0,75 , maka (perhitungan dapat dilakukan seperti berikut 1 : \\int ^{1}_{0}x^{2}dx\\approx \\left( f\\left( 0,25\\right) +f\\left( 0175\\right) \\right) \\dfrac{1-0}{2}= \\dfrac{0,25^{2}+0,75^{2}}{2}= 0,3125 Agar lebih mendekati ke nilai yang akurat, maka jumlah panel ditingkatkan. Untuk jumlah panel 4, titik tengah berada pada x = {0,125;0,375;0,625;0,875} 1 \\int ^{1}_{0}x^{2}dx\\approx ( f\\left( 0,125\\right) + f\\left( 0,375\\right) + f\\left( 0,625\\right) + f\\left( 0,875\\right)) = \\dfrac{1-0}{4} = 0,328125 Gambar grafik proses integrasi dengan metode Riemann dapat dilihat sesuai dengan gambar berikut : 1 Algoritma Program Dalam pemecahan dengan cara numerik menggunakan Metode Integral Riemann, bisa menggunakan aplikasi yang ada dengan bahasa python. Berikut Source Code lengkapnya : #Membuat Fungsi untuk f(x) dan fungsi turunan f(x) def fx ( x ) : return x * x #Turunan f(x) def fx_turunan ( y ) : return ( y * y * y ) / 3 #inputan a = input ( \"Masukkan nilai Batas bawah : \" ) b = input ( \"Masukkan nilai Batas atas : \" ) n = input ( \"Masukkan nilai n : \" ) #Nilai n merupakan nilai yang dibatasi berapa iterasi yang diinginkan a = float ( a ) b = float ( b ) n = float ( n ) h = ( b - a ) / n #Persamaan metode titik tengah atau Riemann x = a jum_luas = 0 print ( \"x\" , \"f(x)\" ) while x < b + h : l = h * fx ( x ) print ( x , l ) x = x + h x = round ( x , 2 ) jum_luas = jum_luas + l jum_eksak = fx_turunan ( b ) - fx_turunan ( a ) error = abs ( jum_luas - jum_eksak ) #Mencetak print ( \"Hasil Jumlah Eksak : \" , jum_eksak ) print ( \"Hasil integral Riemann : \" , jum_luas ) print ( \"Error : \" , error ) Hasil Running Program : Masukkan nilai Batas bawah : 0 Masukkan nilai Batas atas : 1 Masukkan nilai n : 10 x f(x) 0.0 0.0 0.1 0.0010000000000000002 0.2 0.004000000000000001 0.3 0.009 0.4 0.016000000000000004 0.5 0.025 0.6 0.036 0.7 0.048999999999999995 0.8 0.06400000000000002 0.9 0.08100000000000002 1.0 0.1 Hasil Jumlah Eksak : 0.3333333333333333 Hasil integral Riemann : 0.385 Error : 0.051666666666666694 Penjelasan Source Code Program #Membuat Fungsi untuk f(x) dan fungsi turunan f(x) def fx ( x ) : return x * x #Turunan f(x) def fx_turunan ( y ) : return ( y * y * y ) / 3 Pertama, membuat 2 fungsi dimana fungsi pertama mengandung fungsi integral f(x) = x^{2} dan fungsi yang kedua ialah turunan dari integral f(x) = x^2 ialah f^{l}\\left( x\\right) =\\dfrac{x^{3}}{3} #inputan a = input ( \"Masukkan nilai Batas bawah : \" ) b = input ( \"Masukkan nilai Batas atas : \" ) n = input ( \"Masukkan nilai n : \" ) #Nilai n merupakan nilai yang dibatasi berapa iterasi yang diinginkan a = float ( a ) b = float ( b ) n = float ( n ) Kedua, membuat variabel inputan untuk nilai batas atas, bawah dan n. n merupakan berapa iterasi yang diinginkan oleh si pengguna program. Lalu, tipe data untuk nilai batas atas, batas bawah dan iterasi ialah bertipe float. h = ( b - a ) / n #Persamaan metode titik tengah atau Riemann x = a Ketiga, untuk variable h ialah berisi proses integrasi menggunakan metode titik tengah dan nilai variable x ialah nilai dari variable a. jum_luas = 0 print ( \"x\" , \"f(x)\" ) Keempat, variable jum_luas mempunyai nilai 0 dan print, untuk mencetak tampilan x dan f(x) . x merupakan nilai banyaknya iterasi yang dilakukan, dengan satuan float. Jadi jika hanya 4 iterasi, maka akan mencetak satuan 1/4 dari iterasi. dan f(x) merupakan nilai dari hasil iterasi. while x < b + h : l = h * fx ( x ) print ( x , l ) x = x + h x = round ( x , 2 ) jum_luas = jum_luas + l jum_eksak = fx_turunan ( b ) - fx_turunan ( a ) error = abs ( jum_luas - jum_eksak ) Kelima, menggunakan perulangan while untuk melakukan iterasi. Dimana jika nilai x kurang dari nilai b+h , maka melakukan iterasi. Variable l berisi nilai h dan dikalikan dengan isi dari fungsi f(x) . Lalu mencetak nilai x dan nilai l. Variable x berisi nilai x ditambahkan dengan nilai h . Dan nilai x berisi round dari nilai (x,2) . Dan nilai jum_luas mempunyai nilai jum_luas ditambahkan dengan 1. Kemudian, diluar dari perulangan, variable jum_eksask berisi nilai dari fungsi fx_turunan(b)-fx_turunan(a). Dan yang terakhir variable error yang menampung nilai error dari iterasi yang dilakukan dengan rumus jum_luas-jum_eksak. #Mencetak print ( \"Hasil Jumlah Eksak : \" , jum_eksak ) print ( \"Hasil integral Riemann : \" , jum_luas ) print ( \"Error : \" , error ) Keenam dan yang terakhir, mencetak nilai dari jumlah eksak, nilai dari hasil itegrasi Riemann dan error yang dihasilkan saat melakukan integrasi.","title":"1. Newton-Cotes"},{"location":"#2_metode_trapesium","text":"Menurut rumus geometri, luas trapesium merupakan jumlah sisi yang sejajar dikali tinggi dibagi 2. Dengan kaitannya dengan grafik fungsi f(x) , dalam koordinat cartesius, yang diamsumsikan berada di atas sumbu x, maka didapat rumus metode integrasi trapesium (satu pias) untuk menyelesaikan permasalahan menggunakan metode analitik dan numerik ialah sebagai berikut 2 : I\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2} Lalu, jika ingin dihitung pengintegrasian numerik dari sebuah fungsi yang berdejarat dua atau lebih, penggunaan metode trapesium akan memberikan kesalahan(yang bisa saja mendapatkan kesalahan yang lebih besar), sebagaimana yang ada pada pengimplementasian berikut 2 : Contoh Soal Hitunglah persamaan metode trapesium satu pias untuk menghitung, I=\\int ^{4}_{0}e^{x}dx 2 Penyelesaian : Persamaan diatas dapat diselesaikan dengan cara analitik, sebagai berikut : 2 I=\\int ^{4}_{0}e^{x}dx=\\left[ e^{x}\\right] _{0}^{4}=\\left[ e^{4}-e^{0}\\right] =53,598150 Hitungan dengan menggunakan Numerik dengan menggunakan metode trapesium menghasilkan : 2 I\\approx \\left( b-a\\right) \\dfrac{f\\left( a\\right) +f\\left( b\\right) }{2}=\\left( 4-0\\right) \\dfrac{e^{0}+e^{4}}{2}=111,1963 Kesalahan atau error relatif terhadap nilai eksak perhitungannya sebagai berikut : \\varepsilon _{t}=\\dfrac{53,598150-111,1963}{53,598150}\\times 100\\% = -107,46\\% Dari sini, bisa disimpulkan bahwa penggunaan metode trapesium dengan satu pias memberikan kesalahan atau error yang sangat besar bahkan bisa mencapai lebih dari 100%. Maka dari itu, dilakukan beberapa perubahan dengan cara memperbanyak pias yang digunakan, yang artinya memperbanyak jumlah dari trapesium yang akan digunakan. Untuk mengestimasi luas daerah yang ingin dicari. Karena akan menggunakan banyak trapesium, maka integral total dapat dihitung dengan : 2 I=\\int ^{x_{1}}_{x_{0}}f\\left( x\\right) dx+\\int ^{x_{2}}_{x_{1}}f\\left( x\\right) dx+\\ldots +\\int ^{x_{n}}_{x_{n}-1}f\\left( x\\right) dx Jika lebar interval (yang berarti tinggi dari trapesium) dibuat sama, yaitu \\Delta x , sebagaimana yang sesuai dengan gambar di bawah berikut ini : 2 Maka, dapat disimpulkan bahwa integral total yang didapat adalah : 2 I=\\Delta x \\times \\dfrac{f\\left( x_{1}\\right) +f\\left( x_{0}\\right) }{2} + \\Delta x \\times \\dfrac{f\\left( x_{2}\\right) +f\\left( x_{1}\\right) }{2} + . . .+ \\Delta x \\times \\dfrac{f\\left( x_{n}\\right) +f\\left( x_{n-1}\\right) }{2} atau bisa juga dapat dituliskan secara singkat seperti berikut : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) +f\\left( x_{n}\\right) \\right] atau bisa juga seperti berikut : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] Contoh soal dengan empat pias Selesaikan persamaan berikut dengan menggunakan metode trapesium dengan empat pias, I=\\int ^{4}_{0}e^{x}dx 2 Penyelesaian : Karena digunakan metode trapesium dengan 4 pias, maka dari itu untuk menghitung lebar tiap pias ialah : 2 \\Delta x=\\dfrac{b-a}{n}=\\dfrac{4-0}{4}=1 Luas daerah yang dicari untuk persamaan ini ialah : 2 I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] I=\\dfrac{1}{2}[ e^{0}+e^{4}+2(e^{1}+e^{2}+e^{3})] = 57,991950 Kesalahan/error yang didapat terhadap nilai eksak : 2 \\varepsilon _{t}=\\dfrac{53,598150-57,991950}{53,598150}\\times 100\\% = -8,2\\% Maka dari itu, perbedaan dari contoh pertama dan contoh kedua cukup signifikan. Karena pada contoh pertama, hanya mempunyai satu pias dan mempunyai error sangat besar hingga melebihi 100%, sedangkan pada contoh kedua, persamaan yang sama dilanjutkan dengan diselesaikan dengan menggunakan empat pias, mempunyai galat atau error lebih kecil. Mengapa demikian, karena semakin banyak pias maka semakin banyak iterasi, maka error yang didapat semakin kecil. 2 Algoritma Program Dalam pemecahan dengan cara numerik menggunakan Metode Trapesium, bisa menggunakan aplikasi yang ada dengan bahasa python. Berikut Source Code lengkapnya : import math from math import exp e = exp ( 1 ) #Membuat fungsi untuk menyimpan data f(x) def fungsi ( x ) : return e ** x print ( \"Persamaan\" ) print ( \"e^x\" ) hasil_analitik = 54 #Hasil analitik harus bernilai int(bulat) a = float ( input ( \"Masukkan nilai batas bawah : \" )) b = float ( input ( \"Masukkan nilai batas atas : \" )) iterasi_banyak = int ( input ( \"Masukkan Banyak iterasi : \" )) print ( \"iterasi\" , \"trapesium\" , ' \\t ' , \"Error\" ) for iterasi in range ( 1 , iterasi_banyak ) : n = 2 * iterasi h = ( b - a ) / n #Metode Trapesium xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) It = ( h ) * (( fungsi ( a ) + ( 2 * y ) + fungsi ( b )) / 2 ) error = ( hasil_analitik - It ) / It * 100 print ( iterasi , ' \\t ' , \" %.8f \" % It , ' \\t ' , \" %.8f \" % error ) Hasil Running Program : Persamaan e^x Masukkan nilai batas bawah : 0 Masukkan nilai batas atas : 4 Masukkan Banyak iterasi : 4 iterasi trapesium Error 1 70.37626223 -23.26958226 2 57.99194987 -6.88362760 3 55.56871603 -2.82302011 Penjelasan Program import math from math import exp e = exp ( 1 ) #Membuat fungsi untuk menyimpan data f(x) def fungsi ( x ) : return e ** x print ( \"Persamaan\" ) print ( \"e^x\" ) hasil_analitik = 54 #Hasil analitik harus bernilai int(bulat) Pertama, mengimport math untuk menginisialisasi nilai eksponen, dengan nama exp dan dengan nilai pangkat 1 yang ditampung dalam variable e. Lalu, membuat fungsi f(x) yang berisi persamaan e^{x} . Selanjutnya mencetak tulisan persamaan, yaitu persamaannya ialah : e^{x} . Variable hasil_analitik ialah hasil analitik yang telah dihitung sebelumnya, ialah 53,598150 atau dibulatkan menjadi 54 . Harus int atau bulat, karena akan dikurangi oleh hasil nilai integrasi dari metode trapesium sehingga menjadi nilai error yang diperoleh. a = float ( input ( \"Masukkan nilai batas bawah : \" )) b = float ( input ( \"Masukkan nilai batas atas : \" )) iterasi_banyak = int ( input ( \"Masukkan Banyak iterasi : \" )) print ( \"iterasi\" , \"trapesium\" , ' \\t ' , \"Error\" ) Kedua, variable a dan b dimana menampung nilai batas bawah dan nilai batas atas. Variable iterasi_banyak ialah menampung banyaknya user akan menginput iterasi yang diinginkan. Lalu mencetak tampilan agar lebih menarik sehingga data iterasi, nilai yang diperoleh dari metode trapesium dan error tertata dengan rapi. for iterasi in range ( 1 , iterasi_banyak ) : n = 2 * iterasi h = ( b - a ) / n Ketiga, perulangan yang pertama ialah perulangan untuk iterasi di dalam jangkauan (1, iterasi_banyak). Maksud dari dalam jangkauan 1, iterasi_banyak ialah program akan mengeksekusi sebanyak apa program akan mengeksekusi untuk iterasi yang diinginkan, lalu banyaknya iterasi akan ditampung dalam variable n. variable h menampung rumus dari menghitung lebar dari setiap alas pada trapesium. #Metode Trapesium xi = a y = 0 for i in range ( 1 , n ): xi = xi + h y += fungsi ( xi ) It = ( h ) * (( fungsi ( a ) + ( 2 * y ) + fungsi ( b )) / 2 ) error = ( hasil_analitik - It ) / It * 100 Keempat, variable xi berisi tentang nilai a atau nilai batas bawah dari fungsi. Variable y berisi tentang awalan. Di dalam perulangan kedua, berisi tentang untuk i di dalam jangkauan 1,n. Maksud dari untuk i di dalam jangkauan 1,n ialah program akan melakukan perulangan sebanyak n. lalu, variable xi, dimana nilai xi selalu bertambah sebanyak nilai h(setiap melakukan perulangan). Variable y, nilai variable y akan bertambah terus oleh nilai dari fungsi(xi). Selanjutnya, setelah selesai perulangan dalam Variable It menampung rumus metode trapesium, ialah : I=\\dfrac{\\Delta x}{2}\\left[ f\\left( x_{0}\\right) +2\\sum ^{n-1}_{i=1}f\\left( x_{i}\\right) \\right] Dan yang terakhir, variable error ialah menampung rumus untuk mencari nilai error menggunakan rumus : \\varepsilon _{t}=\\dfrac{Nilai Analitik-Nilai eksak(Nilai Pendekatan)}{Nilai analitik}\\times 100\\% print ( iterasi , ' \\t ' , \" %.8f \" % It , ' \\t ' , \" %.8f \" % error ) Kelima, yang terakhir ialah menampilkan hasil dari nilai iterasi, nilai Nilai eksak(Nilai Pendekatan) dan Nilai Error.","title":"2. Metode Trapesium"},{"location":"#refrensi","text":"https://bookdown.org/moh_rosidi2610/Metode_Numerik/diffinteg.html \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Dr. Achmad Fahrurozi, S.Si, M.Si, Integral Numerik, Universitas Gunadarma \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Refrensi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Gauss/","text":"Metode Gauss \u00b6 Eliminasi Gauss merupakan sebuah metode untuk mengoperasikan nilai-nilai ke dalam sebuah matriks sehingga matriks tersebut menjadi matriks yang lebih sederhana lagi. Dengan cara melakukan sebuah operasi baris, sehingga matriks tersebut bisa menjadi matriks baris 1 . Hal ini dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks 1 . Bisa menjadi salah satu metode penyelesaian sebuah persamaan linear dengan cara mengubah persamaan linear tersebut ke dalam matriks teraugmentasi dan mengoperasikannya 1 . Lalu, setelah menjadi matriks baris, lakukan substitusi balik un tuk mendapatkan nilai dari variabel-variabel tersebut 1 . Ciri-ciri Metode Gauss ialah sebagai berikut : \\begin{bmatrix} 1 & 2 & 3 \\\\ 0 & 1 & 9 \\\\ 0 & 0 & 1 \\end{bmatrix} Jika suatu baris tidak dinyatakan semua nol(0), maka bilangan yang pertama yang tidak nol merupakan 1 (1 utama) 1 . Baris nol akan terletak di bagian bawah 1 . 1 utama baris berikutnya berada di kanan 1 utama baris diatasnya 1 . Dibawah 1 utama harus nol 1 . Contoh Soal \u00b6 Tentukan nilai yang memenuhi sistem persamaan berikut dengan menggunakan metode eleminasi Gauss. 2x_{1} + x_{2} + 4x_{3} = 8 3x_{1} + 2x_{2} + x_{3} = 10 x_{1} + 3_x{2} - 3x_{3} = 8 Jawaban : Matriks perluasan dari Sistem persamaan linear diatas adalah : \\begin{bmatrix} 2 & 1 & 4 & | & 8\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Selanjutnya, ialah buat B1 menjadi --> B1 = b_{1} - b_{3} \\begin{bmatrix} 2-1 & 1-3 & 4-3 & | & 8-8\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Langkah ketiga, buat B2 menjadi --> B2 = b_{2} - 3.b_{1} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 3-(3.1) & 2-(3.-2) & 1-(3.1) &| & 10-(3.0) \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Berikutnya, pada langkah keempat ialah buat B3 menjadi --> B3 = b_{3} - b_{1} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 1-1 & 3-(-2) & 3-1 &| & 8-0 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 0 & 5 & 2 &| & 8 \\end{bmatrix} Selanjutnya, langkah kelima yakni buat B2 --> B2 = b_{2} : 8 \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 : 8 & 8 : 8 & -2 : 8 &| & 10 : 8 \\\\0 & 5 & 2 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 5 & 2 &| & 8 \\end{bmatrix} Langkah keenam, buat B3 menjadi --> B3 = b_{3} - 5.b_{2} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\0 - (5.0) & 5-(5.1) & 2-(5.(1.25)) &| & 8-(5.(1.25)) \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 3.25 &| & 1.75 \\end{bmatrix} Lalu, langkah ketujuh ialah buat B3 menjadi --> B3 = b_{3} : 3.25 \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\0 : 3.25 & 0:3.25 & 3.25:3.25 &| & 1.75:3.25 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 1 &| & 0.538 \\end{bmatrix} Dan, yang terakhir ialah mensubstitusikan dari bawah : \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 1 &| & 0.538 \\end{bmatrix} Berikut penyelesaian untuk mensubstitusikan balik dari bawah menjadi : X_{3} = 0.538 X_{2} - 0.25(X_{3}) = 1.25 X_{2} = 1.25 + 0.25 (0.538) X_{2} = 1.384 X_{1} - 2X_{2} + X_{3} = 0 X_{1} = 2X_{2} - X_{3} X_{1} = 2(1.384) - 0.538 X_{1} = 2.23 Jadi, Nilai X_{1} = 2.23 , X_{2} = 1.384 dan X_{3} = 0.538 Algoritma Penyelesaian dalam Metode Gauss \u00b6 Berikut beberapa algoritma penyelesaian pada Metode Gauss : Ubah persamaan linear ke dalam bentuk matriks atau dalam program ini bisa saja menggunakan bentuk persamaan linear namun pada kali ini menggunakan persamaan linear dalam bentuk matriks. Membuat sebuah perulangan untuk eliminasi maju dengan berstruktur. Untuk perulangan yang pertama, melakukan perulangan sebanyak panjang matriks yang angkanya dimulai dari 0. Selanjutnya, dalam perulangan kedua atau lanjutan dari perulangan pertama ialah menentukan nilai faktor pengali pembuat nol pertama dan mengubah dalam bentuk matriks hasil yang dikurangi dengan nilai faktor yang dikalikan dengan matriks di indeks diatas atau diagonal. Perulangan ketiga, berada di dalam perulangan kedua yakni mengubah nilai matriks di indeks bawah diagonal menjadi nol dengan cara dikurangi dengan nilai dari faktor yang dikalikan dengan matriks di indeks atas diagonal. Perulangan selanjutnya yakni di dalam perulangan kedua untuk, menampilkan perubahan nilai matriks. Membuat perulangan kedua bersarang juga atau mengandung perulangan substitusi mundur dengan berstruktur Perulangan yang pertama ialah sebanyak panjang matriks yang dimulai dari indeks terakhir untuk mengambil nilai dari hasil dari nilai x. Perulangan selanjutnya di dalam perulangan pertama, untuk mengurangi nilai hasil dengan nilai koefisien yang dikalikan dengan nilai x. Perulangan selanjutnya, ialah untuk menampilkan nilai matriks yang baru setelah nilai matriks yang diproses di semua perulangan. Menampilkan nilai yang dicari. Berikut Pengimplementasian Algoritma pada pemrograman bahasa python : matrik = [ [[ 2 , 1 , 4 ],[ \"X1\" ],[ 8 ]], [[ 3 , 2 , 1 ],[ \"X2\" ],[ 10 ]], [[ 1 , 3 , 3 ],[ \"X3\" ],[ 8 ]], ] #Mencetak Persamaan Linear 3 Variabel dalma bentuk Matriks print ( \"Persamaan Linear 3 variabel dalam bentuk matriks : \" ) for u in matrik : print ( u ) print ( \" \\n \" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ): for i in range ( k + 1 , len ( matrik )): faktor = matrik [ i ][ 0 ][ k ] / matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )): matrik [ i ][ 0 ][ j ] = round ( matrik [ i ][ 0 ][ j ] - ( faktor * matrik [ k ][ 0 ][ j ]), 4 ) matrik [ i ][ 2 ][ 0 ] = round ( matrik [ i ][ 2 ][ 0 ] - ( faktor * matrik [ k ][ 2 ][ 0 ]), 2 ) for u in matrik : print ( u ) print ( \" \\n \" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )): sum = sum - round (( matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ]), 4 ) matrik [ i ][ 1 ][ 0 ] = round ( sum / matrik [ i ][ 0 ][ i ], 4 ) for u in matrik : print ( u ) print ( \" \\n \" ) for u in matrik : print ( u ) print ( \"Nilai per- variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ])): print ( f \"x { u + 1 } = { round ( matrik [ u ][ 1 ][ 0 ], 4 ) } \" ) Hasil running program : Persamaan Linear 3 variabel dalam bentuk matriks : [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 3 , 2 , 1 ], [ 'X2' ], [ 10 ]] [[ 1 , 3 , 3 ], [ 'X3' ], [ 8 ]] faktor = 1.5 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 1 , 3 , 3 ], [ 'X3' ], [ 8 ]] faktor = 0.5 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 2.5 , 1.0 ], [ 'X3' ], [ 4.0 ]] faktor = 5.0 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 'X3' ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 2.2305 ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 2.2305 ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] Nilai per - variabel yang diperoleh x1 = 2.2305 x2 = 1.385 x3 = 0.5385 Refrensi \u00b6 https://adhityafaika.wordpress.com/2018/10/24/metode-eliminasi-gauss-dan-gauss-jordan/ \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Metode Eliminasi Gauss"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Gauss/#metode_gauss","text":"Eliminasi Gauss merupakan sebuah metode untuk mengoperasikan nilai-nilai ke dalam sebuah matriks sehingga matriks tersebut menjadi matriks yang lebih sederhana lagi. Dengan cara melakukan sebuah operasi baris, sehingga matriks tersebut bisa menjadi matriks baris 1 . Hal ini dapat digunakan sebagai salah satu metode penyelesaian persamaan linear dengan menggunakan matriks 1 . Bisa menjadi salah satu metode penyelesaian sebuah persamaan linear dengan cara mengubah persamaan linear tersebut ke dalam matriks teraugmentasi dan mengoperasikannya 1 . Lalu, setelah menjadi matriks baris, lakukan substitusi balik un tuk mendapatkan nilai dari variabel-variabel tersebut 1 . Ciri-ciri Metode Gauss ialah sebagai berikut : \\begin{bmatrix} 1 & 2 & 3 \\\\ 0 & 1 & 9 \\\\ 0 & 0 & 1 \\end{bmatrix} Jika suatu baris tidak dinyatakan semua nol(0), maka bilangan yang pertama yang tidak nol merupakan 1 (1 utama) 1 . Baris nol akan terletak di bagian bawah 1 . 1 utama baris berikutnya berada di kanan 1 utama baris diatasnya 1 . Dibawah 1 utama harus nol 1 .","title":"Metode Gauss"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Gauss/#contoh_soal","text":"Tentukan nilai yang memenuhi sistem persamaan berikut dengan menggunakan metode eleminasi Gauss. 2x_{1} + x_{2} + 4x_{3} = 8 3x_{1} + 2x_{2} + x_{3} = 10 x_{1} + 3_x{2} - 3x_{3} = 8 Jawaban : Matriks perluasan dari Sistem persamaan linear diatas adalah : \\begin{bmatrix} 2 & 1 & 4 & | & 8\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Selanjutnya, ialah buat B1 menjadi --> B1 = b_{1} - b_{3} \\begin{bmatrix} 2-1 & 1-3 & 4-3 & | & 8-8\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 3 & 2 & 1 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Langkah ketiga, buat B2 menjadi --> B2 = b_{2} - 3.b_{1} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 3-(3.1) & 2-(3.-2) & 1-(3.1) &| & 10-(3.0) \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 1 & 3 & 3 &| & 8 \\end{bmatrix} Berikutnya, pada langkah keempat ialah buat B3 menjadi --> B3 = b_{3} - b_{1} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 1-1 & 3-(-2) & 3-1 &| & 8-0 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 8 & -2 &| & 10 \\\\ 0 & 5 & 2 &| & 8 \\end{bmatrix} Selanjutnya, langkah kelima yakni buat B2 --> B2 = b_{2} : 8 \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 : 8 & 8 : 8 & -2 : 8 &| & 10 : 8 \\\\0 & 5 & 2 &| & 8 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 5 & 2 &| & 8 \\end{bmatrix} Langkah keenam, buat B3 menjadi --> B3 = b_{3} - 5.b_{2} \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\0 - (5.0) & 5-(5.1) & 2-(5.(1.25)) &| & 8-(5.(1.25)) \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 3.25 &| & 1.75 \\end{bmatrix} Lalu, langkah ketujuh ialah buat B3 menjadi --> B3 = b_{3} : 3.25 \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\0 : 3.25 & 0:3.25 & 3.25:3.25 &| & 1.75:3.25 \\end{bmatrix} = \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 1 &| & 0.538 \\end{bmatrix} Dan, yang terakhir ialah mensubstitusikan dari bawah : \\begin{bmatrix} 1 & -2 & 1 & | & 0\\\\ 0 & 1 & -0.25 &| & 1.25 \\\\ 0 & 0 & 1 &| & 0.538 \\end{bmatrix} Berikut penyelesaian untuk mensubstitusikan balik dari bawah menjadi : X_{3} = 0.538 X_{2} - 0.25(X_{3}) = 1.25 X_{2} = 1.25 + 0.25 (0.538) X_{2} = 1.384 X_{1} - 2X_{2} + X_{3} = 0 X_{1} = 2X_{2} - X_{3} X_{1} = 2(1.384) - 0.538 X_{1} = 2.23 Jadi, Nilai X_{1} = 2.23 , X_{2} = 1.384 dan X_{3} = 0.538","title":"Contoh Soal"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Gauss/#algoritma_penyelesaian_dalam_metode_gauss","text":"Berikut beberapa algoritma penyelesaian pada Metode Gauss : Ubah persamaan linear ke dalam bentuk matriks atau dalam program ini bisa saja menggunakan bentuk persamaan linear namun pada kali ini menggunakan persamaan linear dalam bentuk matriks. Membuat sebuah perulangan untuk eliminasi maju dengan berstruktur. Untuk perulangan yang pertama, melakukan perulangan sebanyak panjang matriks yang angkanya dimulai dari 0. Selanjutnya, dalam perulangan kedua atau lanjutan dari perulangan pertama ialah menentukan nilai faktor pengali pembuat nol pertama dan mengubah dalam bentuk matriks hasil yang dikurangi dengan nilai faktor yang dikalikan dengan matriks di indeks diatas atau diagonal. Perulangan ketiga, berada di dalam perulangan kedua yakni mengubah nilai matriks di indeks bawah diagonal menjadi nol dengan cara dikurangi dengan nilai dari faktor yang dikalikan dengan matriks di indeks atas diagonal. Perulangan selanjutnya yakni di dalam perulangan kedua untuk, menampilkan perubahan nilai matriks. Membuat perulangan kedua bersarang juga atau mengandung perulangan substitusi mundur dengan berstruktur Perulangan yang pertama ialah sebanyak panjang matriks yang dimulai dari indeks terakhir untuk mengambil nilai dari hasil dari nilai x. Perulangan selanjutnya di dalam perulangan pertama, untuk mengurangi nilai hasil dengan nilai koefisien yang dikalikan dengan nilai x. Perulangan selanjutnya, ialah untuk menampilkan nilai matriks yang baru setelah nilai matriks yang diproses di semua perulangan. Menampilkan nilai yang dicari. Berikut Pengimplementasian Algoritma pada pemrograman bahasa python : matrik = [ [[ 2 , 1 , 4 ],[ \"X1\" ],[ 8 ]], [[ 3 , 2 , 1 ],[ \"X2\" ],[ 10 ]], [[ 1 , 3 , 3 ],[ \"X3\" ],[ 8 ]], ] #Mencetak Persamaan Linear 3 Variabel dalma bentuk Matriks print ( \"Persamaan Linear 3 variabel dalam bentuk matriks : \" ) for u in matrik : print ( u ) print ( \" \\n \" ) #untuk Eliminasi Maju for k in range ( 0 , len ( matrik ) - 1 ): for i in range ( k + 1 , len ( matrik )): faktor = matrik [ i ][ 0 ][ k ] / matrik [ k ][ 0 ][ k ] print ( \"faktor = \" , faktor ) for j in range ( k , len ( matrik )): matrik [ i ][ 0 ][ j ] = round ( matrik [ i ][ 0 ][ j ] - ( faktor * matrik [ k ][ 0 ][ j ]), 4 ) matrik [ i ][ 2 ][ 0 ] = round ( matrik [ i ][ 2 ][ 0 ] - ( faktor * matrik [ k ][ 2 ][ 0 ]), 2 ) for u in matrik : print ( u ) print ( \" \\n \" ) #Untuk Substitusi Mundur for i in range ( len ( matrik ) - 1 , - 1 , - 1 ): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( i + 1 , len ( matrik )): sum = sum - round (( matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ]), 4 ) matrik [ i ][ 1 ][ 0 ] = round ( sum / matrik [ i ][ 0 ][ i ], 4 ) for u in matrik : print ( u ) print ( \" \\n \" ) for u in matrik : print ( u ) print ( \"Nilai per- variabel yang diperoleh\" ) for u in range ( len ( matrik [ 0 ][ 0 ])): print ( f \"x { u + 1 } = { round ( matrik [ u ][ 1 ][ 0 ], 4 ) } \" ) Hasil running program : Persamaan Linear 3 variabel dalam bentuk matriks : [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 3 , 2 , 1 ], [ 'X2' ], [ 10 ]] [[ 1 , 3 , 3 ], [ 'X3' ], [ 8 ]] faktor = 1.5 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 1 , 3 , 3 ], [ 'X3' ], [ 8 ]] faktor = 0.5 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 2.5 , 1.0 ], [ 'X3' ], [ 4.0 ]] faktor = 5.0 [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 'X3' ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 'X2' ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 'X1' ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 2.2305 ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] [[ 2 , 1 , 4 ], [ 2.2305 ], [ 8 ]] [[ 0.0 , 0.5 , - 5.0 ], [ 1.385 ], [ - 2.0 ]] [[ 0.0 , 0.0 , 26.0 ], [ 0.5385 ], [ 14.0 ]] Nilai per - variabel yang diperoleh x1 = 2.2305 x2 = 1.385 x3 = 0.5385","title":"Algoritma Penyelesaian dalam Metode Gauss"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Gauss/#refrensi","text":"https://adhityafaika.wordpress.com/2018/10/24/metode-eliminasi-gauss-dan-gauss-jordan/ \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Refrensi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Jacobi/","text":"Metode Jacobi \u00b6 Metode Jacobi merupakan salah satu bidang analisis numerik yang digunakan untuk menyelasaikan permasalahan pada persamaan linear dan juga sering dijumpai dalam bentuk berbagai ilmu di matematika. Dan juga, Jacobi merupakan salah satu metode tak langsung dalam penyelesaian sistem linear yaitu bermula dari suatu hampiran penyelesaian awal dan kemudian berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen 1 . Metode ini ditemukan oleh seorang matematikawan yang berasal dari Jerman bernama Gustav Jakob Jacobi 1 . Metode ini merupakan suatu teknik penyelesaian SPL berukuran n x n, AX = b, secara iteratif. Proses penyelesaian dimulai dengan suatu hampiran awal terhadap penyelesaian, X0, kemudian membentuk suatu serangkaian vector X1, X2, \u2026 yang konvergen ke X 2 . Seperti contoh, jika ada 3 persamaan dengan 3 bilangan yang tidak diketahui seperti persamaan berikut 2 : \\begin{aligned}\\\\a_{11}x_{1} + a_{12}x_{2} + a_{13}x_{3} = b_{1}\\\\ a_{21}x_{1} + a_{22}x_{2} + a_{23}x_{3} = b_{2}\\\\a_{31}x_{1} + a_{32}x_{2} + a_{33}x_{3} = b_{3}\\end{aligned} Dari sistem persamaan yang ada diatas, dengan metode Jacobi dapat dijabarkan sebagai berikut 2 : \\begin{aligned}x_{1}=\\dfrac{b_{1}-a_{12}x_{12}-a_{13}x_{13}}{a_{11}} \\\\ x_{2}=\\dfrac{b_{2}-a_{21}x_{1}-a_{23}x_{23}}{a_{22}} \\\\ x_{3} = \\dfrac{b_{3}-a_{31}x_{1}-a_{32}x_{2}}{a_{33}}\\end{aligned} Contoh Soal \u00b6 Menyelesaikan Persamaan Linear berikut : 4x - y + z = 7 4x - 8y + z = -2 -2x + y + 5z = 15 Dengan beberapa bantuan yaitu : Psolusi = (2, 4, 3) P0 = (x, y, z) = (1, 2, 2) Gunakan iterasi Jacobi. Jawaban Nilai P0 = (x, y, z) = (1, 2, 2), maka yang pertama ialah menentukan bagaimana cara menacri nilai x, y dan z. \\begin{aligned}4x-y+z=7\\rightarrow 4x=7+y-z\\rightarrow x=\\dfrac{7+y-z}{4}\\\\ 4x-8y+z= - 21 \\rightarrow -8y = -21-4x-z \\rightarrow y=\\dfrac{21+4x+z}{8}\\\\ -2x+y+5z= 15 \\rightarrow 5z = 15+2x-y \\rightarrow z=\\dfrac{15+2x-y}{5}\\end{aligned} Iterasi pertama, diperoleh sebagai berikut : \\begin{aligned}x_{1}=\\dfrac{7+y-z}{4}=\\dfrac{7+2-2}{4} =\\dfrac{7}{4} = 1,75 \\\\ y_{1}=\\dfrac{21+4x+z}{8}=\\dfrac{21+4.1+2}{8} =\\dfrac{27}{8} = 3,375 \\\\ z_{1} =\\dfrac{15+2x-y}{5}=\\dfrac{15+2.1-2}{5} =\\dfrac{15}{5} = 3 \\end{aligned} \u200b dengan nilai P_{1} = 1,75 ; 3,375 ; 3 yang merupakan output dari iterasi 1 Contoh jawaban diatas merupakan contoh penyelesaian analitik dengan metode jacobi dengan hanya iterasi pertama, namun dengan cara numerik dapat diselesaikan dengan Algoritma sebagai berikut : Algoritma Penyelesaian Metode Jacobi \u00b6 Mengubah bentuk persamaan linear ke dalam sebuah bentuk matriks. Menentukan nilai analitik, agar nilai error pada eksak akan tampil sehingga diketahui nilai error yang dihasilkan dalam penyelesaian numerik. Menyimpan sebuah tempat untuk menampung nilai matriks yang baru sehingga nilai dari x, y dan z akan tersimpan di dala matriks tersebut. Memasukkan atau menentukan nilai iterasi yang diinginkan untuk menyelesaikan persamaan. Di dalam perulangan pertama, menginisialisasi nilai matriks pada baris pertama dan kolom pertama dan juga menghapus nilai array di dalam array yang kosong. Di dalam perulangan pertama, ada perulangan kedua yang dimana memasukkan sebuah nilai panjang dari matriks untuk mengambil nilai dari matriks. Sehingga menampung nilai yang dihasilkan dari perulangan ketiga yang kosong. Perulangan selanjutnya atau bisa dibilang perulangan ketiga, yakni panjang dari matriks atau sebanyak panjang dari matriks yang ada dalam perulangan berfungsi sebagai nilai pengurangan dari hasil dengan koefisien yang dikalikan dengan nilai x dan mengambil nilai dari matriks. Perulangan yang terakhir ialah nilai sebanyak panjang matriks berfungsi sebuah nilai matriks dari x_{1} dengan nilai yang ditampung dalam array kosong. Dan juga menghitung nilai error yang diperoleh dari nilai eksak pada x. Hasil dari pengimplementasian pada Algoritma pada program python seperti berikut : matrik = [ [[ 4 , - 1 , 1 ],[ \"X1\" ],[ 7 ]], [[ 4 , - 8 , 1 ],[ \"X2\" ],[ - 2 ]], [[ - 2 , 1 , 5 ],[ \"X3\" ],[ 15 ]], ] true = [ 2 , 4 , 3 ] K = [] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari Matriks\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Jacobi\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] K . append ( sum / matrik [ i ][ 0 ][ i ]) print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): matrik [ x ][ 1 ][ 0 ] = K [ x ] ea = abs (( true [ x ] - K [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % K [ x ], ' \\t ' , \" %.10f \" % ea ) K . clear () Hasil Running Program : Penyelesaiaan Sistem Persamaan Linear Dari Matriks [[4, -1, 1], ['X1'], [7]] [[4, -8, 1], ['X2'], [-2]] [[-2, 1, 5], ['X3'], [15]] Menggunakan Metode Jacobi Masukkan banyak iterasi : 3 iterasi 1 |Xi |errorXi X1 |1.7500000000| 12.5000000000 X2 |0.2500000000| 93.7500000000 X3 |3.0000000000| 0.0000000000 iterasi 2 |Xi |errorXi X1 |1.0625000000| 46.8750000000 X2 |1.5000000000| 62.5000000000 X3 |3.6500000000| 21.6666666667 iterasi 3 |Xi |errorXi X1 |1.2125000000| 39.3750000000 X2 |1.2375000000| 69.0625000000 X3 |3.1250000000| 4.1666666667 Refrensi \u00b6 https://id.wikipedia.org/wiki/Metode_Jacobi \u21a9 \u21a9 https://blog.ub.ac.id/mandegani/2014/06/07/metode-eliminasi-gauss-jacobi/ \u21a9 \u21a9 \u21a9","title":"Metode Jacobi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Jacobi/#metode_jacobi","text":"Metode Jacobi merupakan salah satu bidang analisis numerik yang digunakan untuk menyelasaikan permasalahan pada persamaan linear dan juga sering dijumpai dalam bentuk berbagai ilmu di matematika. Dan juga, Jacobi merupakan salah satu metode tak langsung dalam penyelesaian sistem linear yaitu bermula dari suatu hampiran penyelesaian awal dan kemudian berusaha memperbaiki hampiran dalam tak berhingga namun langkah konvergen 1 . Metode ini ditemukan oleh seorang matematikawan yang berasal dari Jerman bernama Gustav Jakob Jacobi 1 . Metode ini merupakan suatu teknik penyelesaian SPL berukuran n x n, AX = b, secara iteratif. Proses penyelesaian dimulai dengan suatu hampiran awal terhadap penyelesaian, X0, kemudian membentuk suatu serangkaian vector X1, X2, \u2026 yang konvergen ke X 2 . Seperti contoh, jika ada 3 persamaan dengan 3 bilangan yang tidak diketahui seperti persamaan berikut 2 : \\begin{aligned}\\\\a_{11}x_{1} + a_{12}x_{2} + a_{13}x_{3} = b_{1}\\\\ a_{21}x_{1} + a_{22}x_{2} + a_{23}x_{3} = b_{2}\\\\a_{31}x_{1} + a_{32}x_{2} + a_{33}x_{3} = b_{3}\\end{aligned} Dari sistem persamaan yang ada diatas, dengan metode Jacobi dapat dijabarkan sebagai berikut 2 : \\begin{aligned}x_{1}=\\dfrac{b_{1}-a_{12}x_{12}-a_{13}x_{13}}{a_{11}} \\\\ x_{2}=\\dfrac{b_{2}-a_{21}x_{1}-a_{23}x_{23}}{a_{22}} \\\\ x_{3} = \\dfrac{b_{3}-a_{31}x_{1}-a_{32}x_{2}}{a_{33}}\\end{aligned}","title":"Metode Jacobi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Jacobi/#contoh_soal","text":"Menyelesaikan Persamaan Linear berikut : 4x - y + z = 7 4x - 8y + z = -2 -2x + y + 5z = 15 Dengan beberapa bantuan yaitu : Psolusi = (2, 4, 3) P0 = (x, y, z) = (1, 2, 2) Gunakan iterasi Jacobi. Jawaban Nilai P0 = (x, y, z) = (1, 2, 2), maka yang pertama ialah menentukan bagaimana cara menacri nilai x, y dan z. \\begin{aligned}4x-y+z=7\\rightarrow 4x=7+y-z\\rightarrow x=\\dfrac{7+y-z}{4}\\\\ 4x-8y+z= - 21 \\rightarrow -8y = -21-4x-z \\rightarrow y=\\dfrac{21+4x+z}{8}\\\\ -2x+y+5z= 15 \\rightarrow 5z = 15+2x-y \\rightarrow z=\\dfrac{15+2x-y}{5}\\end{aligned} Iterasi pertama, diperoleh sebagai berikut : \\begin{aligned}x_{1}=\\dfrac{7+y-z}{4}=\\dfrac{7+2-2}{4} =\\dfrac{7}{4} = 1,75 \\\\ y_{1}=\\dfrac{21+4x+z}{8}=\\dfrac{21+4.1+2}{8} =\\dfrac{27}{8} = 3,375 \\\\ z_{1} =\\dfrac{15+2x-y}{5}=\\dfrac{15+2.1-2}{5} =\\dfrac{15}{5} = 3 \\end{aligned} \u200b dengan nilai P_{1} = 1,75 ; 3,375 ; 3 yang merupakan output dari iterasi 1 Contoh jawaban diatas merupakan contoh penyelesaian analitik dengan metode jacobi dengan hanya iterasi pertama, namun dengan cara numerik dapat diselesaikan dengan Algoritma sebagai berikut :","title":"Contoh Soal"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Jacobi/#algoritma_penyelesaian_metode_jacobi","text":"Mengubah bentuk persamaan linear ke dalam sebuah bentuk matriks. Menentukan nilai analitik, agar nilai error pada eksak akan tampil sehingga diketahui nilai error yang dihasilkan dalam penyelesaian numerik. Menyimpan sebuah tempat untuk menampung nilai matriks yang baru sehingga nilai dari x, y dan z akan tersimpan di dala matriks tersebut. Memasukkan atau menentukan nilai iterasi yang diinginkan untuk menyelesaikan persamaan. Di dalam perulangan pertama, menginisialisasi nilai matriks pada baris pertama dan kolom pertama dan juga menghapus nilai array di dalam array yang kosong. Di dalam perulangan pertama, ada perulangan kedua yang dimana memasukkan sebuah nilai panjang dari matriks untuk mengambil nilai dari matriks. Sehingga menampung nilai yang dihasilkan dari perulangan ketiga yang kosong. Perulangan selanjutnya atau bisa dibilang perulangan ketiga, yakni panjang dari matriks atau sebanyak panjang dari matriks yang ada dalam perulangan berfungsi sebagai nilai pengurangan dari hasil dengan koefisien yang dikalikan dengan nilai x dan mengambil nilai dari matriks. Perulangan yang terakhir ialah nilai sebanyak panjang matriks berfungsi sebuah nilai matriks dari x_{1} dengan nilai yang ditampung dalam array kosong. Dan juga menghitung nilai error yang diperoleh dari nilai eksak pada x. Hasil dari pengimplementasian pada Algoritma pada program python seperti berikut : matrik = [ [[ 4 , - 1 , 1 ],[ \"X1\" ],[ 7 ]], [[ 4 , - 8 , 1 ],[ \"X2\" ],[ - 2 ]], [[ - 2 , 1 , 5 ],[ \"X3\" ],[ 15 ]], ] true = [ 2 , 4 , 3 ] K = [] print ( \"Penyelesaiaan Sistem Persamaan Linear Dari Matriks\" ) for i in matrik : print ( i ) print ( \"Menggunakan Metode Jacobi\" ) n = int ( input ( \"Masukkan banyak iterasi : \" )) for i in range ( len ( matrik [ 0 ][ 0 ])): matrik [ i ][ 1 ][ 0 ] = 0 for k in range ( n ): for i in range ( len ( matrik )): sum = matrik [ i ][ 2 ][ 0 ] for j in range ( len ( matrik )): if i == j : continue sum = sum - matrik [ i ][ 0 ][ j ] * matrik [ j ][ 1 ][ 0 ] K . append ( sum / matrik [ i ][ 0 ][ i ]) print ( f \"iterasi { k + 1 } \" , ' \\t ' , \"|Xi\" , ' \\t\\t\\t ' , \"|errorXi\" ) for x in range ( len ( matrik )): matrik [ x ][ 1 ][ 0 ] = K [ x ] ea = abs (( true [ x ] - K [ x ]) / true [ x ]) * 100 print ( \"X\" + str ( x + 1 ), ' \\t\\t ' , \"| %.10f |\" % K [ x ], ' \\t ' , \" %.10f \" % ea ) K . clear () Hasil Running Program : Penyelesaiaan Sistem Persamaan Linear Dari Matriks [[4, -1, 1], ['X1'], [7]] [[4, -8, 1], ['X2'], [-2]] [[-2, 1, 5], ['X3'], [15]] Menggunakan Metode Jacobi Masukkan banyak iterasi : 3 iterasi 1 |Xi |errorXi X1 |1.7500000000| 12.5000000000 X2 |0.2500000000| 93.7500000000 X3 |3.0000000000| 0.0000000000 iterasi 2 |Xi |errorXi X1 |1.0625000000| 46.8750000000 X2 |1.5000000000| 62.5000000000 X3 |3.6500000000| 21.6666666667 iterasi 3 |Xi |errorXi X1 |1.2125000000| 39.3750000000 X2 |1.2375000000| 69.0625000000 X3 |3.1250000000| 4.1666666667","title":"Algoritma Penyelesaian Metode Jacobi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Jacobi/#refrensi","text":"https://id.wikipedia.org/wiki/Metode_Jacobi \u21a9 \u21a9 https://blog.ub.ac.id/mandegani/2014/06/07/metode-eliminasi-gauss-jacobi/ \u21a9 \u21a9 \u21a9","title":"Refrensi"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Pengertian/","text":"Pengertian Sistem Aljabar Linear \u00b6 Menurut wikipedia, Aljabar linear merupakan bidang studi matematika yang mempelajari tentang sistem persamaan linear dan solusinya, vektor, atau bahkan transformasi linear. Matriks dan operasinyapun merupakan bagian dari penyelesaian aljabar linear. Penyelesaian linear biasanya dapat diselesaikan dalam bentuk matriks 1 . Persamaan linear dalam n variabel ialah x_{1}, x_{2}, x_{3}, . . . . , x_{n} yang sebagai persamaan sehingga dapat dinyatakan dalam bentuk a_{1}x_{1} + a_{2}x_{2}+ . . . + a_{x}x_{n} = b dimana a_{1}, a_{2}, . . . , a_{n} merupakan sebuah konstanta dan b merupakan sebuah konstanta 2 . Contoh dari bentuk persamaan linear sebagai berikut : x+3y = 7 --> Bentuk persamaan linear 2 variabel 2x_{1}+x_{2}-4x_{3} = 8 --> Bentuk persamaan linear 3 variabel. Sistem persamaan linear merupakan sebuah himpunan berhingga dari beberapa persamaan-persamaan linear yang dalam bentuk variabel x_{1}, x_{2}, . . . . ,x_{n} . sebuah sistem persamaan yang tidak mempunyai pemecahan dikatakan tak konsisten, karena jika ada setidak-tidaknya hanya satu pemecahan saja, maka sistem persamaan tersebut dapat dikatakan konsisten 2 . Dalam sebuah penyelesaian numerik dalam aljabar linear, terdapat 2 penyelesaian atau metode yang akan dibahas yaitu : Metode Eliminasi Gauss Metode Jacobi Refrensi \u00b6 \u00b7 https://id.wikipedia.org/wiki/Aljabar_linear \u21a9 \u00b7 https://www.slideshare.net/HendroAgungSetiawan/aljabar-linier-bab-3-sistem-persamaan-linier \u21a9 \u21a9","title":"Pengertian Aljabar Linear"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Pengertian/#pengertian_sistem_aljabar_linear","text":"Menurut wikipedia, Aljabar linear merupakan bidang studi matematika yang mempelajari tentang sistem persamaan linear dan solusinya, vektor, atau bahkan transformasi linear. Matriks dan operasinyapun merupakan bagian dari penyelesaian aljabar linear. Penyelesaian linear biasanya dapat diselesaikan dalam bentuk matriks 1 . Persamaan linear dalam n variabel ialah x_{1}, x_{2}, x_{3}, . . . . , x_{n} yang sebagai persamaan sehingga dapat dinyatakan dalam bentuk a_{1}x_{1} + a_{2}x_{2}+ . . . + a_{x}x_{n} = b dimana a_{1}, a_{2}, . . . , a_{n} merupakan sebuah konstanta dan b merupakan sebuah konstanta 2 . Contoh dari bentuk persamaan linear sebagai berikut : x+3y = 7 --> Bentuk persamaan linear 2 variabel 2x_{1}+x_{2}-4x_{3} = 8 --> Bentuk persamaan linear 3 variabel. Sistem persamaan linear merupakan sebuah himpunan berhingga dari beberapa persamaan-persamaan linear yang dalam bentuk variabel x_{1}, x_{2}, . . . . ,x_{n} . sebuah sistem persamaan yang tidak mempunyai pemecahan dikatakan tak konsisten, karena jika ada setidak-tidaknya hanya satu pemecahan saja, maka sistem persamaan tersebut dapat dikatakan konsisten 2 . Dalam sebuah penyelesaian numerik dalam aljabar linear, terdapat 2 penyelesaian atau metode yang akan dibahas yaitu : Metode Eliminasi Gauss Metode Jacobi","title":"Pengertian Sistem Aljabar Linear"},{"location":"Solusi%20Numerik%20Pada%20Aljabar%20Linear/Pengertian/#refrensi","text":"\u00b7 https://id.wikipedia.org/wiki/Aljabar_linear \u21a9 \u00b7 https://www.slideshare.net/HendroAgungSetiawan/aljabar-linier-bab-3-sistem-persamaan-linier \u21a9 \u21a9","title":"Refrensi"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Euler/","text":"Metode Euler \u00b6 Metode Euler merupakan metode yang paling sederhana dari deret taylor, bisa dibilang metode euler lebih sederhana dibandingkan dengan metode euler. Penyelesaian menggunakan metode Euler dilakukan melalui persamaan berikut[^1] : y_{i}+1 = y_{i} + f(x_{i},y{i})h dimana nilai i merupakan nilai sebuah iterasi. Contoh Soal \u00b6 Selesaikan persamaan differensial di bawah berikut menggunakan metode euler dengan cara analitik jika yang diketahui adalah f(0) = 1 menggunakan h=0,05 dan n=100 [^2] ! f'\\left( x,y\\right) =\\dfrac{y}{2x+1} Jawaban Penyelesaian secara analitik persamaan tersebut untuk nilainya ialah f(0) = 1 ialah sebagai berikut. f\\left( x\\right) =\\sqrt{2x^{2}+1} Dan, dalam cara numerik ialah sebagai berikut : Iterasi 1 y(0,5) = 1 + 0,05 \\times \\dfrac {1}{(2\\cdot0) + 1} = 1,05 Iterasi 2 y(0,1) = 1,05 + 0,05 \\times \\dfrac {1}{(2\\cdot0,05) + 1} = 1,097727 Algoritma Penyelesaian Metode Euler \u00b6 Menentukan titik awal integrasi x_{0} dan y_{0} . Menentukan Jumlah iterasi yang diinginkan dalam melakukan solusi numerik dengan metode euler dengan tanda iterasi sebanyak n dan step size h yang akan digunakan. Melakukan integrasi pada persamaan yang terdapat dalam metode Euler. Berikut ini merupakan pengimplementasian Algoritma pada Pemrograman Python : def f ( x , y ): return 2 * x ** 2 + 3 * y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari (Nilai yang diinginkan untuk mendapatkan nilai iterasi : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) n = ( xb - x0 ) / h iterasi = int ( n ) x = x0 y = y0 true = 1.097727 e = abs ( true - y ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( iterasi ): y = y + h * f ( x , y ) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) Hasil Running Program : Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler Masukkan Nilai X0 : 1 Masukkan Nilai y0 : 2 Masukkan Nilai X yang dicari (Nilai yang diinginkan untuk mendapatkan nilai iterasi : 2.34 Masukkan Nilai h : 0.25 |i | x(i) | y(i) |e |1 | 1.000000 | 2.000000 | 0.902273 |1 | 1.250000 | 4.000000 | 2.902273 |2 | 1.500000 | 7.781250 | 6.683523 |3 | 1.750000 | 14.742188 | 13.644461 |4 | 2.000000 | 27.330078 | 26.232351 |5 | 2.250000 | 49.827637 | 48.729910","title":"Metode Euler "},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Euler/#metode_euler","text":"Metode Euler merupakan metode yang paling sederhana dari deret taylor, bisa dibilang metode euler lebih sederhana dibandingkan dengan metode euler. Penyelesaian menggunakan metode Euler dilakukan melalui persamaan berikut[^1] : y_{i}+1 = y_{i} + f(x_{i},y{i})h dimana nilai i merupakan nilai sebuah iterasi.","title":"Metode Euler"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Euler/#contoh_soal","text":"Selesaikan persamaan differensial di bawah berikut menggunakan metode euler dengan cara analitik jika yang diketahui adalah f(0) = 1 menggunakan h=0,05 dan n=100 [^2] ! f'\\left( x,y\\right) =\\dfrac{y}{2x+1} Jawaban Penyelesaian secara analitik persamaan tersebut untuk nilainya ialah f(0) = 1 ialah sebagai berikut. f\\left( x\\right) =\\sqrt{2x^{2}+1} Dan, dalam cara numerik ialah sebagai berikut : Iterasi 1 y(0,5) = 1 + 0,05 \\times \\dfrac {1}{(2\\cdot0) + 1} = 1,05 Iterasi 2 y(0,1) = 1,05 + 0,05 \\times \\dfrac {1}{(2\\cdot0,05) + 1} = 1,097727","title":"Contoh Soal"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Euler/#algoritma_penyelesaian_metode_euler","text":"Menentukan titik awal integrasi x_{0} dan y_{0} . Menentukan Jumlah iterasi yang diinginkan dalam melakukan solusi numerik dengan metode euler dengan tanda iterasi sebanyak n dan step size h yang akan digunakan. Melakukan integrasi pada persamaan yang terdapat dalam metode Euler. Berikut ini merupakan pengimplementasian Algoritma pada Pemrograman Python : def f ( x , y ): return 2 * x ** 2 + 3 * y print ( \"Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler\" ) x0 = float ( input ( \"Masukkan Nilai X0 : \" )) y0 = float ( input ( \"Masukkan Nilai y0 : \" )) xb = float ( input ( \"Masukkan Nilai X yang dicari (Nilai yang diinginkan untuk mendapatkan nilai iterasi : \" )) h = float ( input ( \"Masukkan Nilai h : \" )) n = ( xb - x0 ) / h iterasi = int ( n ) x = x0 y = y0 true = 1.097727 e = abs ( true - y ) print ( '|i' , ' \\t |' , 'x(i)' , ' \\t\\t |' , 'y(i) \\t\\t |e' ) print ( \"| %d \" % x0 , ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) for i in range ( iterasi ): y = y + h * f ( x , y ) x = x + h e = abs ( true - y ) print ( \"| %d \" % ( i + 1 ), ' \\t |' , \" %f \" % x , ' \\t |' , \" %f \\t |\" % y , \" %f \" % e ) Hasil Running Program : Penyelesaian Persamaan Differensial Biasa Menggunakan Metode Euler Masukkan Nilai X0 : 1 Masukkan Nilai y0 : 2 Masukkan Nilai X yang dicari (Nilai yang diinginkan untuk mendapatkan nilai iterasi : 2.34 Masukkan Nilai h : 0.25 |i | x(i) | y(i) |e |1 | 1.000000 | 2.000000 | 0.902273 |1 | 1.250000 | 4.000000 | 2.902273 |2 | 1.500000 | 7.781250 | 6.683523 |3 | 1.750000 | 14.742188 | 13.644461 |4 | 2.000000 | 27.330078 | 26.232351 |5 | 2.250000 | 49.827637 | 48.729910","title":"Algoritma Penyelesaian Metode Euler"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Biasa/","text":"Persamaan Differensial Biasa \u00b6 Persamaan differensial biasa merupakan persamaan differensial yang di mana fungsi yang nilainya tidak diketahui atau biasa disebut dengan variabel terikat, merupakan fungsi dari variabel tunggal 1 . Dalam bentuk sederhana dalam pengaplikasian differensial biasa dalam fungsi yang tidak diketahui adalah fungsi rill atau fungsi kompleks 1 . Dalam pengertian yang lain, Persamaan Differensial Biasa merupakan persamaan differensial yang terdiri dari beberapa turunan biasa yang terdiri dari fungsi yang tidak diketahui dari variabel bebas tunggal 2 . Bentuk persamaan dari persamaan differensial biasa ialah sebagai berikut : y = f(x,y)\\ atau \\dfrac {dy}{dx} = f(x,y) Dalam penyelesaian numerik untuk persamaan differensial biasa, menggunakan satu metode yaitu : Metode Euler. Refrensi \u00b6 https://id.wikipedia.org/wiki/Persamaan_diferensial_biasa \u21a9 \u21a9 http://iffatul.staff.gunadarma.ac.id/Downloads/files/46564/BAb-+08+Solusi+Persamaan+Diferensial \u21a9","title":"Pengertian"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Biasa/#persamaan_differensial_biasa","text":"Persamaan differensial biasa merupakan persamaan differensial yang di mana fungsi yang nilainya tidak diketahui atau biasa disebut dengan variabel terikat, merupakan fungsi dari variabel tunggal 1 . Dalam bentuk sederhana dalam pengaplikasian differensial biasa dalam fungsi yang tidak diketahui adalah fungsi rill atau fungsi kompleks 1 . Dalam pengertian yang lain, Persamaan Differensial Biasa merupakan persamaan differensial yang terdiri dari beberapa turunan biasa yang terdiri dari fungsi yang tidak diketahui dari variabel bebas tunggal 2 . Bentuk persamaan dari persamaan differensial biasa ialah sebagai berikut : y = f(x,y)\\ atau \\dfrac {dy}{dx} = f(x,y) Dalam penyelesaian numerik untuk persamaan differensial biasa, menggunakan satu metode yaitu : Metode Euler.","title":"Persamaan Differensial Biasa"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Biasa/#refrensi","text":"https://id.wikipedia.org/wiki/Persamaan_diferensial_biasa \u21a9 \u21a9 http://iffatul.staff.gunadarma.ac.id/Downloads/files/46564/BAb-+08+Solusi+Persamaan+Diferensial \u21a9","title":"Refrensi"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Differensial/","text":"Persamaan Differensial \u00b6 Persamaan differensial merupakan sebuah persamaan matematika dimana memiliki sebuah suatu fungsi satu variable atau lebih, yang menghubungkan nilai dari suatu fungsi itu sendiri dan turunannya dari fungsi tersebut terdapat dalam berbagai orde. Persamaan differensial ini sangat memegang peranan penting dalam ilmu rekayasa, fisika, ilmu ekonomi dan berbagai macam ilmu lainnya yang berkaitan dengan persamaan differensial 1 . Contoh pemodelan masalah dunia nyata menggunakan persamaan diferensial adalah penentuan kecepatan bola yang jatuh bebas di udara, hanya dengan memperhitungkan gravitasi tahanan udara. Percepatan bola tersebut ke arah tanah adalah percepatan karena gravitasi dikurangi dengan perlambatan karena gesekan udara. Mencari kecepatan sebagai fungsi waktu mensyaratkan pemecahan sebuah persamaan diferensial. Contoh lain adalah untuk simulasi gerak dinamis atau simulasi dinamis 1 . Dalam persamaan Differensial, terdapat 2 macam yaitu : Persamaan Differensial Biasa. Persamaan Differensial Parsial. Refrensi \u00b6 https://id.wikipedia.org/wiki/Persamaan_diferensial \u21a9 \u21a9","title":"Pengertian Persamaan Diffrensial"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Differensial/#persamaan_differensial","text":"Persamaan differensial merupakan sebuah persamaan matematika dimana memiliki sebuah suatu fungsi satu variable atau lebih, yang menghubungkan nilai dari suatu fungsi itu sendiri dan turunannya dari fungsi tersebut terdapat dalam berbagai orde. Persamaan differensial ini sangat memegang peranan penting dalam ilmu rekayasa, fisika, ilmu ekonomi dan berbagai macam ilmu lainnya yang berkaitan dengan persamaan differensial 1 . Contoh pemodelan masalah dunia nyata menggunakan persamaan diferensial adalah penentuan kecepatan bola yang jatuh bebas di udara, hanya dengan memperhitungkan gravitasi tahanan udara. Percepatan bola tersebut ke arah tanah adalah percepatan karena gravitasi dikurangi dengan perlambatan karena gesekan udara. Mencari kecepatan sebagai fungsi waktu mensyaratkan pemecahan sebuah persamaan diferensial. Contoh lain adalah untuk simulasi gerak dinamis atau simulasi dinamis 1 . Dalam persamaan Differensial, terdapat 2 macam yaitu : Persamaan Differensial Biasa. Persamaan Differensial Parsial.","title":"Persamaan Differensial"},{"location":"Solusi%20Numerik%20Pada%20Persamaan%20Diffrensial/Pengertian_Differensial/#refrensi","text":"https://id.wikipedia.org/wiki/Persamaan_diferensial \u21a9 \u21a9","title":"Refrensi"}]}